// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"fmt"
	"github.com/google/wire"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"golinebot/api"
	"golinebot/bot"
	"golinebot/config"
	"golinebot/db"
	"golinebot/service"
	"time"
)

// Injectors from wire.go:

func initapp() (*Server, func(), error) {
	config, err := configProvider()
	if err != nil {
		return nil, nil, err
	}
	client, err := bot.NewLineBot(config)
	if err != nil {
		return nil, nil, err
	}
	mongoClient, err := mongodbProvider(config)
	if err != nil {
		return nil, nil, err
	}
	iRepository := db.NewRepository(mongoClient)
	serviceService := service.NewService(iRepository)
	lineController := api.NewLineController(client, serviceService)
	server := NewServer(lineController)
	return server, func() {
	}, nil
}

// wire.go:

var cf *config.Config

var mgdb *mongo.Client

func configProvider() (*config.Config, error) {
	if cf == nil {
		c, err := config.NewConfig("./env")

		if err != nil {
			return c, err
		}
		cf = c
	}
	return cf, nil
}

func mongodbProvider(config2 *config.Config) (*mongo.Client, error) {
	if mgdb == nil {
		conn := fmt.Sprintf("mongodb://%s:%s@%s", config2.MongoUser, config2.MongoPwd, config2.MongoURL)
		ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
		defer cancel()
		client, err := mongo.Connect(ctx, options.Client().ApplyURI(conn))

		if err != nil {
			return nil, err
		}

		mgdb = client
	}
	return mgdb, nil
}

var providerSet = wire.NewSet(
	configProvider,
	mongodbProvider, db.NewRepository, bot.NewLineBot, service.NewService, api.NewLineController, NewServer,
)
